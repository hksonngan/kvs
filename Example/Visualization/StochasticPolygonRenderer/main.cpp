/*****************************************************************************/
/**
 *  @file   main.cpp
 *  @author Naohisa Sakamoto
 *  @brief  Example program for kvs::StochasticPolygonRenderer class.
 */
/*----------------------------------------------------------------------------
 *
 *  Copyright (c) Visualization Laboratory, Kyoto University.
 *  All rights reserved.
 *  See http://www.viz.media.kyoto-u.ac.jp/kvs/copyright/ for details.
 *
 *  $Id$
 */
/*****************************************************************************/
#include <kvs/glut/Application>
#include <kvs/glut/Screen>
#include <kvs/PolygonObject>
#include <kvs/PolygonImporter>
#include <kvs/StructuredVolumeObject>
#include <kvs/HydrogenVolumeData>
#include <kvs/Isosurface>
#include <kvs/StochasticPolygonRenderer>


/*===========================================================================*/
/**
 *  @brief  Main function.
 *  @param  argc [i] argument count
 *  @param  argv [i] argument values
 */
/*===========================================================================*/
int main( int argc, char** argv )
{
    kvs::glut::Application app( argc, argv );

    kvs::PolygonObject* object = NULL;
    if ( argc > 1 )
    {
        /* NormalType of the imported polygon object must be VertexNormal.
         */
        object = new kvs::PolygonImporter( argv[1] );
    }
    else
    {
        /* If the data file isn't specified, a hydrogen volume data is generated by
         * using kvs::HydrogenVolumeData class and then an isosurface polygon object
         * is extracted from the volume data.
         */
        kvs::StructuredVolumeObject* volume = new kvs::HydrogenVolumeData( kvs::Vector3ui( 64, 64, 64 ) );
        volume->updateMinMaxValues();
        const double i = ( volume->maxValue() + volume->minValue() ) * 0.5;
        const kvs::PolygonObject::NormalType n = kvs::PolygonObject::VertexNormal;
        const bool d = false;
        const kvs::TransferFunction t( 256 );
        object = new kvs::Isosurface( volume, i, n, d, t );
        delete volume;
    }
    object->setOpacity( 128 );

    kvs::StochasticPolygonRenderer* renderer = new kvs::StochasticPolygonRenderer();
    renderer->setRepetitionLevel( 50 );
    renderer->enableLODControl();

    kvs::glut::Screen screen( &app );
    screen.registerObject( object, renderer );
    screen.show();

    // Enable two-side (frontface and backface) lighting
    kvs::Light::SetModelTwoSide( true );

    return app.run();
}
